#!/usr/bin/env bash

source "${DOTFILE_BASH_DIR}/vendor/git-prompt.sh"

# Prints out number of background and suspended jobs
jobscount() {
  local stopped=$(jobs -sp | wc -l | trim)
  local running=$(jobs -rp | wc -l | trim)
  ((running+stopped)) && echo -n "(${running}r/${stopped}s) "
}

# Prints dot if background jobs
jobsindicator() {
  (( $(jobs | wc -l) > 0 )) && echo -n "â˜‰ "
}

# Nuke shell history and force exit (prevents memory from repopulating)
# https://askubuntu.com/questions/191999/how-to-clear-bash-history-completely
nuke_history() {
  cat /dev/null > ~/.bash_history && history -c && exit
}

# Trims string
trim() {
  awk '{$1=$1};1'
}

# Creates a new bash scaffold script
n-bash() {
  cp "${DOTFILE_DIR}/scaffold/main.bash" "$@" && chmod +x "$@"
}

# Scaffold Makefile
n-makefile() {
  cp "${DOTFILE_DIR}/scaffold/Makefile.help" "Makefile"
}

# Load nvm
l-nvm() {
  [[ -s "$NVM_DIR/nvm.sh" ]] && source "$NVM_DIR/nvm.sh"
  [[ -s "$NVM_DIR/bash_completion" ]] && source "$NVM_DIR/bash_completion"
}

# Load rvm
l-rvm() {
  [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
  [[ -s "/etc/profile.d/rvm.sh" ]] && source "/etc/profile.d/rvm.sh"
}

# Load env env
l-car() {
  [[ -s "$HOME/.cargo/env" ]] && source "$HOME/.cargo/env"
}

# Load haskell
l-has() {
  [[ -s "$HOME/.ghcup/env" ]] && source "$HOME/.ghcup/env"
}

# Load kubernetes environment
l-k8s() {
  source <(kubectl completion bash)
}

# Open directory or $1 with default editor
function p() {
  if [ $# -eq 0 ]; then
    "${EDITOR}"
  else
    "${EDITOR}" "$@"
  fi
}

# Open directory or $1 with sublime
function o() {
  if [ $# -eq 0 ]; then
    subl
  else
    subl "$@"
  fi
}

# Open directory or $1 with sublime merge
function i() {
  if [ $# -eq 0 ]; then
    smerge
  else
    smerge "$@"
  fi
}

# Reload bash profile
function reload() {
  source ~/.bash_profile
}

# Launch HTTP Server
function server() {
  HTTP_PORT=${1:-8001}
  python -m SimpleHTTPServer $HTTP_PORT
}

function load_average() {
  if [[ $PLATFORM == 'macos' ]]; then
    sysctl -n vm.loadavg
  elif [[ $PLATFORM == 'linux' ]]; then
    cut -d " " -f 1-3 /proc/loadavg
  fi
}

# Stop and remove container
function drm () {
  docker stop $1 && docker rm $1
}

function dka () {
  docker kill $(docker ps -q) # Docker Kill All containers
}

function drma () {
  docker rm $(docker ps -a -q) # Docker ReMove All stopped containers
}

function drmai () {
  docker rmi $(docker images -q) # Docker ReMove All Images
}

function drmaf () {
  docker rm $(docker ps -a -q) -f # Docker ReMove All stopped containers (- force)
}

function drmai () {
  docker rmi $(docker images -q) -f # Docker ReMove All Images (- force)
}

function dsa() {
  docker stop $(docker ps -a -q) # Docker Stop All
}

function dsh () {
  docker exec -it $1 sh # Shell into container
}

function dbash () {
  docker exec -it $1 bash # Bash Shell into container
}

# Calls interactive rebase going $0 commits back
function n() {
  git rebase -i HEAD~$1
}

# Get dev ip
function devip () {
  dcd ls | grep dev | awk '{print $3}'
}
